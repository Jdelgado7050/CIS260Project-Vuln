import tkinter as tk
from tkinter import messagebox
from functools import partial
from threading import Thread
import nmap
import requests
import sys
from version import __version__ #Testing version control functionality

# Function to execute the scanning process
def execute_scan(target, ports, output_text):
    output_text.config(state=tk.NORMAL)
    output_text.delete(1.0, tk.END)  # Clear previous output
    output_text.insert(tk.END, f"Current version: {__version__}\n\n")

    try:
        scan_target(target, ports, output_text)
    except Exception as e:
        output_text.insert(tk.END, f"\nError: {str(e)}\n")
    
    output_text.config(state=tk.DISABLED)

# Function to scan the target IP with specified ports
def scan_target(target, ports, output_text):
    scanner = nmap.PortScanner()

    if ports == "top1000":
        scan_args = "--top-ports 1000 -sV"
    else:
        scan_args = f"-p {ports} -sV"

    output_text.insert(tk.END, f"Scanning {target} with arguments: {scan_args}\n\n")
    scanner.scan(target, arguments=scan_args)

    vulnerabilities = {}

    for host in scanner.all_hosts():
        output_text.insert(tk.END, f"[+] Host: {host} ({scanner[host].hostname()})\n")

        if 'tcp' not in scanner[host]:
            continue

        for port, info in scanner[host]['tcp'].items():
            service = info['name']
            product = info.get('product', 'Unknown')
            version = info.get('version', 'Unknown')
            state = info['state']

            output_text.insert(tk.END, f"  Port {port}: {service} ({state}) - {product} {version}\n")

            if product != "Unknown" and version != "Unknown":
                cve_list = check_cve_in_nvd(product, version)
                if cve_list:
                    key = f"{product} {version}"
                    vulnerabilities.setdefault(key, [])
                    vulnerabilities[key].extend(cve_list)

    if vulnerabilities:
        output_text.insert(tk.END, "\nFound Vulnerabilities with possible Exploit References\n")
        for software, cve_data in vulnerabilities.items():
            output_text.insert(tk.END, f"\n[Software: {software}]\n")
            for cve_id, references in cve_data:
                output_text.insert(tk.END, f" - CVE: {cve_id}\n")
                if references:
                    output_text.insert(tk.END, "   References:\n")
                    for ref in references:
                        output_text.insert(tk.END, f" {ref}\n")
                else:
                    output_text.insert(tk.END, " (No references provided by NVD)\n")
    else:
        output_text.insert(tk.END, "\nNo known vulnerabilities found for detected services.\n")

# Function to check for CVEs in NVD using the correct URL and parameters
def check_cve_in_nvd(product, version):
    query = f"{product} {version}"
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={query}&resultsPerPage=5"

    cve_results = []  # Initialize the list to store CVE data

    try:
        print(f"Querying NVD with: {query}")
        response = requests.get(url, timeout=30)
        if response.status_code == 200:
            data = response.json()
            vulnerabilities = data.get('vulnerabilities', [])
            
            if not vulnerabilities:
                print(f"No CVEs found for {query}")
            
            # Parse each CVE item
            for item in vulnerabilities:
                cve_id = item['cve']['id']
                refs = item['cve'].get('references', [])
                ref_urls = [r['url'] for r in refs if 'url' in r]

                cve_results.append((cve_id, ref_urls))
        else:
            print(f"[ERROR] NVD API returned status code: {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Could not reach NVD: {e}")

    return cve_results  # Return the list of CVEs

# GUI setup
def create_gui():
    window = tk.Tk()
    window.title("Network Vulnerability Scanner")

    tk.Label(window, text="Enter target IP:").pack()
    target_entry = tk.Entry(window)
    target_entry.pack()

    tk.Label(window, text="Enter ports to scan (e.g., '22,80,443' or 'top1000'):").pack()
    ports_entry = tk.Entry(window)
    ports_entry.pack()

    output_text = tk.Text(window, height=20, width=80)
    output_text.pack()

    scan_button = tk.Button(window, text="Scan", command=partial(scan_clicked, target_entry, ports_entry, output_text))
    scan_button.pack()

    window.mainloop()

# Function to handle scan button click
def scan_clicked(target_entry, ports_entry, output_text):
    target = target_entry.get()
    ports = ports_entry.get()
    if target and ports:
        Thread(target=execute_scan, args=(target, ports, output_text)).start()
    else:
        messagebox.showerror("Error", "Please enter both target IP and ports.")

if __name__ == "__main__":
    create_gui()
